---
# Device: Gosund SP1
#
# This is my ESPHome device template for the Gosund SP1
#
# It is close to the original functionality, with the power sensor,
# the button, the LEDs even :)
#
# https://frenck.link/gosund-sp1
#
packages:
  <<: !include_dir_named ../common
  board: !include ../boards/esp8285.yaml

sensor:
  #
  # I have not extracted this sensor into the `sensors` folder.
  # Reasoning is that these require calibration (which can differ per device)
  # and ESPHome doesn't have a way to abtract those calibrations in a sane way.
  #
  # I have quite a few of these plugs, the values/calibrations are so close
  # that I decided to have a single calibration for all Gosund plugs.
  # I might 1Watt off... I'm ok with that.
  #
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO04
    cf1_pin: GPIO05
    change_mode_every: 3
    update_interval: 3s

    # Current sensor
    current:
      id: device_current
      name: "${name} Current"
      entity_category: diagnostic
      state_class: measurement
      device_class: current
      unit_of_measurement: "A"
      accuracy_decimals: 3
      filters:
        # Map 0.0 (from sensor) to 0.0 (true value)
        - calibrate_linear:
            - 0.0 -> 0.014
            - 0.07725 -> 0.072
            - 1.31809 -> 1.062
            - 1.41948 -> 1.129
            - 5.34961 -> 4.361
            - 12.36976 -> 9.891
        # Make everything below 0.01A appear as just 0A.
        # Furthermore it corrects 0.015A for the power usage of the device.
        - lambda: if (x < (0.01 - 0.015)) return 0; else return (x - 0.015);

    # Voltage sensor
    voltage:
      id: device_voltage
      name: "${name} Voltage"
      entity_category: diagnostic
      state_class: measurement
      device_class: voltage
      unit_of_measurement: "V"
      accuracy_decimals: 1
      filters:
        # Map 0.0 (from sensor) to 0.0 (true value)
        - calibrate_linear:
            - 0.0 -> 0.0
            - 587.21063 -> 226.1
            - 605.87170 -> 231.8

    # Power sensor
    power:
      id: device_power
      name: "${name} Power"
      entity_category: diagnostic
      state_class: measurement
      device_class: power
      unit_of_measurement: "W"
      accuracy_decimals: 0
      filters:
        # Map 0.0 (from sensor) to 0.0 (true value)
        - calibrate_linear:
            - 0.0 -> 1.15
            - 55.16593 -> 10.97
            - 1430.86633 -> 245.7
            - 1537.75037 -> 261.6
            - 3520.27588 -> 599.6
            - 13215.68750 -> 2253.0
        # Make everything below 2W appear as just 0W.
        # Furthermore it corrects 1.15W for the power usage of the plug.
        - lambda: if (x < (2 + 1.15)) return 0; else return (x - 1.15);

  - <<: !include ../sensors/total_daily_energy.yaml
    power_id: device_power

binary_sensor:
  # Binary sensor for the button press
  - platform: gpio
    id: device_button
    name: "${name} Button"
    disabled_by_default: true
    pin:
      number: GPIO3
      inverted: true
    on_press:
      - switch.toggle: device_relay

switch:
  # Switch to toggle the relay
  - platform: gpio
    id: device_relay
    name: "${name}"
    restore_mode: RESTORE_DEFAULT_ON
    pin: GPIO14
    on_turn_on:
      - light.turn_on: device_led
    on_turn_off:
      - light.turn_off: device_led

output:
  - platform: esp8266_pwm
    id: device_output_led
    pin:
      number: GPIO1
      inverted: true

light:
  - platform: monochromatic
    id: device_led
    output: device_output_led

# Uses the red LED as status indicator
status_led:
  pin:
    number: GPIO13
    inverted: true
